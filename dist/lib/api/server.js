"use strict";
// This file was auto-generated by @joelek/ts-autoguard. Edit at own risk.
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.makeServer = void 0;
const autoguard = require("@joelek/ts-autoguard/dist/lib-server");
const shared = require("./index");
const makeServer = (routes, serverOptions) => {
    let endpoints = new Array();
    endpoints.push((raw, auxillary) => {
        let method = "GET";
        let matchers = new Array();
        matchers.push(new autoguard.api.DynamicRouteMatcher(0, Infinity, true, autoguard.guards.String));
        return {
            acceptsComponents: () => autoguard.api.acceptsComponents(raw.components, matchers),
            acceptsMethod: () => autoguard.api.acceptsMethod(raw.method, method),
            validateRequest: () => __awaiter(void 0, void 0, void 0, function* () {
                let options = {};
                options["filename"] = matchers[0].getValue();
                options = Object.assign(Object.assign({}, options), autoguard.api.decodeUndeclaredParameters(raw.parameters, Object.keys(options)));
                let headers = {};
                headers = Object.assign(Object.assign({}, headers), autoguard.api.decodeUndeclaredHeaders(raw.headers, Object.keys(headers)));
                let payload = raw.payload;
                let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Requests["getRequest"], serverOptions === null || serverOptions === void 0 ? void 0 : serverOptions.debugMode);
                let request = guard.as({ options, headers, payload }, "request");
                return {
                    handleRequest: () => __awaiter(void 0, void 0, void 0, function* () {
                        let response = yield routes["getRequest"](new autoguard.api.ClientRequest(request, true, auxillary));
                        return {
                            validateResponse: () => __awaiter(void 0, void 0, void 0, function* () {
                                var _a, _b, _c, _d, _e;
                                let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Responses["getRequest"], serverOptions === null || serverOptions === void 0 ? void 0 : serverOptions.debugMode);
                                guard.as(response, "response");
                                let status = (_a = response.status) !== null && _a !== void 0 ? _a : 200;
                                let headers = new Array();
                                headers.push(...autoguard.api.encodeUndeclaredHeaderPairs((_b = response.headers) !== null && _b !== void 0 ? _b : {}, headers.map((header) => header[0])));
                                let payload = (_c = response.payload) !== null && _c !== void 0 ? _c : [];
                                let defaultHeaders = (_e = (_d = serverOptions === null || serverOptions === void 0 ? void 0 : serverOptions.defaultHeaders) === null || _d === void 0 ? void 0 : _d.slice()) !== null && _e !== void 0 ? _e : [];
                                defaultHeaders.push(["Content-Type", "application/octet-stream"]);
                                return autoguard.api.finalizeResponse({ status, headers, payload }, defaultHeaders);
                            })
                        };
                    })
                };
            })
        };
    });
    endpoints.push((raw, auxillary) => {
        let method = "HEAD";
        let matchers = new Array();
        matchers.push(new autoguard.api.DynamicRouteMatcher(0, Infinity, true, autoguard.guards.String));
        return {
            acceptsComponents: () => autoguard.api.acceptsComponents(raw.components, matchers),
            acceptsMethod: () => autoguard.api.acceptsMethod(raw.method, method),
            validateRequest: () => __awaiter(void 0, void 0, void 0, function* () {
                let options = {};
                options["filename"] = matchers[0].getValue();
                options = Object.assign(Object.assign({}, options), autoguard.api.decodeUndeclaredParameters(raw.parameters, Object.keys(options)));
                let headers = {};
                headers = Object.assign(Object.assign({}, headers), autoguard.api.decodeUndeclaredHeaders(raw.headers, Object.keys(headers)));
                let payload = raw.payload;
                let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Requests["headRequest"], serverOptions === null || serverOptions === void 0 ? void 0 : serverOptions.debugMode);
                let request = guard.as({ options, headers, payload }, "request");
                return {
                    handleRequest: () => __awaiter(void 0, void 0, void 0, function* () {
                        let response = yield routes["headRequest"](new autoguard.api.ClientRequest(request, true, auxillary));
                        return {
                            validateResponse: () => __awaiter(void 0, void 0, void 0, function* () {
                                var _a, _b, _c, _d, _e;
                                let guard = autoguard.api.wrapMessageGuard(shared.Autoguard.Responses["headRequest"], serverOptions === null || serverOptions === void 0 ? void 0 : serverOptions.debugMode);
                                guard.as(response, "response");
                                let status = (_a = response.status) !== null && _a !== void 0 ? _a : 200;
                                let headers = new Array();
                                headers.push(...autoguard.api.encodeUndeclaredHeaderPairs((_b = response.headers) !== null && _b !== void 0 ? _b : {}, headers.map((header) => header[0])));
                                let payload = (_c = response.payload) !== null && _c !== void 0 ? _c : [];
                                let defaultHeaders = (_e = (_d = serverOptions === null || serverOptions === void 0 ? void 0 : serverOptions.defaultHeaders) === null || _d === void 0 ? void 0 : _d.slice()) !== null && _e !== void 0 ? _e : [];
                                defaultHeaders.push(["Content-Type", "application/octet-stream"]);
                                return autoguard.api.finalizeResponse({ status, headers, payload }, defaultHeaders);
                            })
                        };
                    })
                };
            })
        };
    });
    return (request, response) => autoguard.api.route(endpoints, request, response, serverOptions);
};
exports.makeServer = makeServer;
